#set($entityName = $buildCodeRequest.getEntityNameDO().getEntityName())
#set($upperEntityName = $buildCodeRequest.getEntityNameDO().getUpperEntityName())
#set($domainEntityName = $buildCodeRequest.getEntityNameDO().getDomainEntityName())
#set($upperDomainEntityName = $buildCodeRequest.getEntityNameDO().getUpperDomainEntityName())
#set($queryEntityName = $buildCodeRequest.getEntityNameDO().getQueryEntityName())
#set($upperQueryEntityName = $buildCodeRequest.getEntityNameDO().getUpperQueryEntityName())
#set($daoEntityName = $buildCodeRequest.getEntityNameDO().getDaoEntityName())
#set($upperDaoEntityName = $buildCodeRequest.getEntityNameDO().getUpperDaoEntityName())
/**
* @Description $buildCodeRequest.getEntityNameDO().getUpperServiceEntityName() is generated by the auto build Tools. 
* @author $buildCodeRequest.getOwner()
* @time $buildCodeRequest.getTimeValue()
*/

package $buildCodeRequest.getPackageInfoDO().getServicePackage();

import java.util.List;
import javax.annotation.Resource;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.apache.log4j.Logger;
import $buildCodeRequest.getPackageInfoDO().getQueryPackage()$dot$upperQueryEntityName;
import $buildCodeRequest.getPackageInfoDO().getDomainPackage()$dot$upperDomainEntityName;
import $buildCodeRequest.getPackageInfoDO().getDaoPackage()$dot$upperDaoEntityName;
import org.web.exception.ServiceException;

@Service("$buildCodeRequest.getEntityNameDO().getServiceEntityName()")
public class $buildCodeRequest.getEntityNameDO().getUpperServiceEntityName() {

	private static Logger logger = Logger.getLogger($buildCodeRequest.getEntityNameDO().getUpperServiceEntityName()${dot}class);

	@Resource
	private $upperDaoEntityName $daoEntityName;

	/** 
	* @Decription 根据主键查询记录
	* @param $buildCodeRequest.getPrimaryCodeAttributeDO().getAttributeName()
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回唯一记录$upperEntityName.
	*/
	public $upperDomainEntityName $buildCodeRequest.getEntityNameDO().getQueryByIdMethod() ( $buildCodeRequest.getPrimaryCodeAttributeDO().getAttributeType() $buildCodeRequest.getPrimaryCodeAttributeDO().getAttributeName()) throws ServiceException {
		if($buildCodeRequest.getPrimaryCodeAttributeDO().getAttributeName() == null){
			throw new ServiceException("PARAM_IS_EMPTY","Query is null.");
		}
		return $daoEntityName$dot$buildCodeRequest.getEntityNameDO().getQueryByIdMethod()($buildCodeRequest.getPrimaryCodeAttributeDO().getAttributeName());
	}

	/** 
	* @Decription 根据查询条件,返回List.
	* @param $queryEntityName 封装了查询条件对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回一组记录.
	*/
	public List< $upperDomainEntityName > $buildCodeRequest.getEntityNameDO().getQueryListMethod()($upperQueryEntityName $queryEntityName) throws ServiceException {

		if ($queryEntityName == null) {
			throw new ServiceException("PARAM_IS_EMPTY","Query is null.");
		}
		//TODO
		setDefaultQuery($queryEntityName);
		return $daoEntityName$dot$buildCodeRequest.getEntityNameDO().getQueryListMethod()( $queryEntityName );
	}

	/** 
	* @Decription 根据查询条件,查询满足条件的记录数.
	* @param $queryEntityName 封装了查询条件对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回查询条件返回的记录总数.
	*/
	public Integer $buildCodeRequest.getEntityNameDO().getCountMethod()($upperQueryEntityName $queryEntityName) throws ServiceException {
		if ($queryEntityName == null) {
			throw new ServiceException("PARAM_IS_EMPTY","Query is null.");
		}
		setDefaultQuery($queryEntityName);
		return $daoEntityName$dot$buildCodeRequest.getEntityNameDO().getCountMethod()( $queryEntityName );
	}
	
	/**
	* 默认不查询逻辑删除的数据
	*/
	private void setDefaultQuery($upperQueryEntityName $queryEntityName){
		if (StringUtils.isEmpty($queryEntityName${dot}getIsDelete())) {
			$queryEntityName${dot}setIsDelete("NO");
		}
		if (StringUtils.isEmpty($queryEntityName${dot}getOrderByClause())) {
			//$queryEntityName${dot}setOrderByClause("  updateDate DESC ");
		}
	}
	
	/** 
	* @Decription 根据查询条件,返回第一条记录.
	* @param $queryEntityName 封装了查询条件对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回第一条记录.
	*/
	public $upperDomainEntityName selectOne$upperEntityName ($upperQueryEntityName $queryEntityName) throws ServiceException {
		$queryEntityName${dot}setFirstRecord();
		List<$upperDomainEntityName> list = $daoEntityName$dot$buildCodeRequest.getEntityNameDO().getQueryListMethod()( $queryEntityName );
		if(list != null && list.size() > 0){
			return list.get(0);
		}
		return null;
	}

	/**
	 * @Decription 根据查询条件,查询不重复信息.
	 * @param $queryEntityName 封装了查询条件对象.
	 * @author $buildCodeRequest.getOwner()
	 * @date $buildCodeRequest.getTimeValue()
	 * @return 返回不重复信息.
	 */
	public List<String> selectDistinctList($upperQueryEntityName $queryEntityName)throws ServiceException {
		if(StringUtils.isEmpty($queryEntityName${dot}getIsDelete())){
			$queryEntityName${dot}setIsDelete("NO");
		}
		return $daoEntityName${dot}selectDistinctList($queryEntityName);
	}


	/** 
	* @Decription 插入一条新记录.
	* @param $domainEntityName 封装新增的对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回原始对象，如果用到数据库自增主键，并会自动设置新增主键.
	*/
	public $upperDomainEntityName $buildCodeRequest.getEntityNameDO().getInsertMethod()($upperDomainEntityName $domainEntityName)throws ServiceException {
		// check params first.
		checkInsert($domainEntityName);
		
		// TODO add default value.
		
		$daoEntityName$dot$buildCodeRequest.getEntityNameDO().getInsertMethod()($domainEntityName);
		return $domainEntityName;
	}

	/** 
	* @Decription 根据主键修改记录.
	* @param $domainEntityName 封装修改的对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回修改记录数.
	*/
	public int $buildCodeRequest.getEntityNameDO().getUpdateMethod()($upperDomainEntityName $domainEntityName)throws ServiceException {
		// check params first.
		checkUpdate($domainEntityName);
		
		return $daoEntityName$dot$buildCodeRequest.getEntityNameDO().getUpdateMethod()($domainEntityName);
	
	}

	/**
	* According to DB info. check attribute allow empty or not, and check attribute's length is over upper limit of length or not. 
	* and this method is generate by the auto build tool.
	*/
	@SuppressWarnings({"deprecation" })
	private void checkInsert($upperDomainEntityName $domainEntityName) throws ServiceException {
		if( $domainEntityName == null){
			throw new ServiceException("PARAM_IS_EMPTY","Query is null.");
		}
		#foreach ($column in $buildCodeRequest.list)
			#set($codeAttributeDO = $buildCodeRequest.map.get($column))
			#if($codeAttributeDO.getAllowNull().equals("NO"))
				#if($codeAttributeDO.getAttributeType().equals("Integer")||$codeAttributeDO.getAttributeType().equals("Long"))
			        else if ($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()==null
							|| ($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()!=null && String.valueOf($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()).length() > $codeAttributeDO.getColumnSize())) {
						throw new ServiceException("PARAM_IS_INVALID","$codeAttributeDO.getUpperAttributeName() is null or out of range, Upper limit of length is $codeAttributeDO.getColumnSize()");
					}
				#elseif($codeAttributeDO.getAttributeType().equals("String"))
			        else if (StringUtils.isEmpty($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()())
							|| (StringUtils.isNotEmpty($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()) && $domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()().length() > $codeAttributeDO.getColumnSize())) {
						throw new ServiceException("PARAM_IS_INVALID","$codeAttributeDO.getUpperAttributeName() is null or out of range, Upper limit of length is $codeAttributeDO.getColumnSize()");
					}
				#end
			#else
				#if($codeAttributeDO.getAttributeType().equals("Integer")||$codeAttributeDO.getAttributeType().equals("Long"))
			        else if ($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()!=null && String.valueOf($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()).length() > $codeAttributeDO.getColumnSize()) {
						throw new ServiceException("PARAM_IS_INVALID","$codeAttributeDO.getUpperAttributeName() is null or out of range, Upper limit of length is $codeAttributeDO.getColumnSize()");
					}
				#elseif($codeAttributeDO.getAttributeType().equals("String"))
			        else if (StringUtils.isNotEmpty($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()) && $domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()().length() > $codeAttributeDO.getColumnSize()) {
						throw new ServiceException("PARAM_IS_INVALID","$codeAttributeDO.getUpperAttributeName() is null or out of range, Upper limit of length is $codeAttributeDO.getColumnSize()");
					}
				#end
			#end	
		#end
		
	}

	@SuppressWarnings({"deprecation" })
	private void checkUpdate($upperDomainEntityName $domainEntityName) throws ServiceException {
		if( $domainEntityName == null){
			throw new ServiceException("PARAM_IS_EMPTY","Query is null.");
		}
		#foreach ($column in $buildCodeRequest.list)
			#set($codeAttributeDO = $buildCodeRequest.map.get($column))
			#if($codeAttributeDO.getAttributeType().equals("Integer")||$codeAttributeDO.getAttributeType().equals("Long"))
		        else if ($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()!=null && String.valueOf($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()).length() > $codeAttributeDO.getColumnSize()) {
					throw new ServiceException("UPDATE_ERROR","$codeAttributeDO.getUpperAttributeName() is out of range, Upper limit of length is $codeAttributeDO.getColumnSize()");
				}
			#elseif($codeAttributeDO.getAttributeType().equals("String"))
		        else if (StringUtils.isNotEmpty($domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()()) && $domainEntityName${dot}get$codeAttributeDO.getUpperAttributeName()().length() > $codeAttributeDO.getColumnSize()) {
					throw new ServiceException("UPDATE_ERROR","$codeAttributeDO.getUpperAttributeName() is out of range, Upper limit of length is $codeAttributeDO.getColumnSize()");
				}
			#end
		#end
	}
}

