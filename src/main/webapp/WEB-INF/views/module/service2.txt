#set($entityName = $buildCodeRequest.getEntityNameDO().getEntityName())
#set($upperEntityName = $buildCodeRequest.getEntityNameDO().getUpperEntityName())
#set($domainEntityName = $buildCodeRequest.getEntityNameDO().getDomainEntityName())
#set($upperDomainEntityName = $buildCodeRequest.getEntityNameDO().getUpperDomainEntityName())
#set($queryEntityName = $buildCodeRequest.getEntityNameDO().getQueryEntityName())
#set($upperQueryEntityName = $buildCodeRequest.getEntityNameDO().getUpperQueryEntityName())
#set($daoEntityName = $buildCodeRequest.getEntityNameDO().getDaoEntityName())
#set($upperDaoEntityName = $buildCodeRequest.getEntityNameDO().getUpperDaoEntityName())
/**
* @Description $buildCodeRequest.getEntityNameDO().getUpperServiceEntityName() is generated by the auto build Tools. 
* @author $buildCodeRequest.getOwner()
* @time $buildCodeRequest.getTimeValue()
*/
package $buildCodeRequest.getPackageInfoDO().getServicePackage();

import java.util.List;
import javax.annotation.Resource;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.apache.log4j.Logger;
import $buildCodeRequest.getPackageInfoDO().getQueryPackage()$dot$upperQueryEntityName;
import $buildCodeRequest.getPackageInfoDO().getDomainPackage()$dot$upperDomainEntityName;
import $buildCodeRequest.getPackageInfoDO().getDaoPackage()$dot$upperDaoEntityName;
import org.web.base.domain.exception.ServiceException;

public class $buildCodeRequest.getEntityNameDO().getUpperServiceEntityName() {

	/** 
	* @Decription 根据主键查询记录
	* @param $buildCodeRequest.getPrimaryCodeAttributeDO().getAttributeName()
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回唯一记录$upperEntityName.
	*/
	public $upperDomainEntityName $buildCodeRequest.getEntityNameDO().getQueryByIdMethod() ( $buildCodeRequest.getPrimaryCodeAttributeDO().getAttributeType() $buildCodeRequest.getPrimaryCodeAttributeDO().getAttributeName()) throws ServiceException;

	/** 
	* @Decription 根据查询条件,返回List.
	* @param $queryEntityName 封装了查询条件对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回一组记录.
	*/
	public List< $upperDomainEntityName > $buildCodeRequest.getEntityNameDO().getQueryListMethod()($upperQueryEntityName $queryEntityName) throws ServiceException;
	
	/** 
	* @Decription 根据查询条件,返回第一条记录.
	* @param $queryEntityName 封装了查询条件对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回第一条记录.
	*/
	public $upperDomainEntityName selectOne$upperEntityName ($upperQueryEntityName $queryEntityName) throws ServiceException;

	/** 
	* @Decription 根据查询条件,查询满足条件的记录数.
	* @param $queryEntityName 封装了查询条件对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回查询条件返回的记录总数.
	*/
	public Integer $buildCodeRequest.getEntityNameDO().getCountMethod()($upperQueryEntityName $queryEntityName) throws ServiceException;

	/** 
	* @Decription 插入一条新记录.
	* @param $domainEntityName 封装新增的对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回原始对象，如果用到数据库自增主键，并会自动设置新增主键.
	*/
	public $upperDomainEntityName $buildCodeRequest.getEntityNameDO().getInsertMethod()($upperDomainEntityName $domainEntityName)throws ServiceException;

	/** 
	* @Decription 根据主键修改记录.
	* @param $domainEntityName 封装修改的对象.
	* @author $buildCodeRequest.getOwner()
	* @date $buildCodeRequest.getTimeValue()
	* @return 返回修改记录数.
	*/
	public int $buildCodeRequest.getEntityNameDO().getUpdateMethod()($upperDomainEntityName $domainEntityName)throws ServiceException;


}

